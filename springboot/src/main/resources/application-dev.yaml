# 端口配置
server:
  port: 8089
spring:
  #数据库配置
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/springboot_vue?autoReconnect=true&useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&zeroDateTimeBehavior=convertToNull&useSSL=false&nullCatalogMeansCurrent=true
    username: root
    password: bqcBQC123
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource #切换数据源，如果不写，会使用默认的
    # 以下是DuriDataSource的基本配置，如果不写，使用springboot默认的
    druid:
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1
        # IP黑名单 (存在共同时，deny优先于allow)
        deny: 192.168.1.73
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: admin
        # 登录密码
        login-password: 123456
  #缓存配置
  cache:
    redis:
      time-to-live: 60s
    type: redis
  redis:
    host: 101.132.178.177
    port: 6379
    password: bqcBQC123
    timeout: 10000ms
    lettuce:
      pool:
        max-idle: 10
        max-active: 10
        min-idle: 5
        max-wait: 10000ms
    database: 2
  # quartz 定时任务配置
  quartz:
      # 将任务等保存化到数据库
      job-store-type: jdbc
      # 程序结束时会等待quartz相关的内容结束
      wait-for-jobs-to-complete-on-shutdown: true
      # QuartzScheduler启动时更新己存在的Job,这样就不用每次修改targetObject后删除qrtz_job_details表对应记录
      overwrite-existing-jobs: true
      # 这里居然是个map，搞得智能提示都没有，佛了
      properties:
        org:
          quartz:
              # scheduler相关
            scheduler:
              # scheduler的实例名
              instanceName: scheduler
              instanceId: AUTO
            # 持久化相关
            jobStore:
              class: org.quartz.impl.jdbcjobstore.JobStoreTX
              driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
              # 表示数据库中相关表是QRTZ_开头的
              tablePrefix: QRTZ_
              useProperties: false
            # 线程池相关
            threadPool:
              class: org.quartz.simpl.SimpleThreadPool
              # 线程数
              threadCount: 10
              # 线程优先级
              threadPriority: 5
              threadsInheritContextClassLoaderOfInitializingThread: true
  #Activiti property configuration
  activiti:
      #自动更新数据库结构
      database-schema-update: false
      #自动检查、部署流程定义文件
      check-process-definitions: false
      # asyncExecutorActivate是指activiti在流程引擎启动就激活AsyncExecutor,异步：true-开启（默认）、false-关闭
      spring.activiti.async-executor-activate: false
      #历史级别
      history-level: full
      db-history-used: true
      #流程定义文件存放目录,要具体到某个目录
      process-definition-location-prefix: classpath:/process/
      #process-definition-location-suffixes: #流程文件格式
      #  - **.bpmn20.xml
      #  - **.bpmn
  # servlet 文件
  servlet:
    multipart:
      enabled: true
      # 最大支持文件大小
      max-file-size: 100MB
      # 最大支持请求大小
      max-request-size: 100MB
#mybatis:
  #mapper-locations: classpath*:/mapper/*.xml
  #type-aliases-package: lqx.framework.modules.**.entity
#mybatis-plus配置
mybatis-plus:
  mapper-locations: classpath*:**/mapper/xml/**/*.xml
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 2
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 1
    logic-not-delete-value: 0
    # 查询条件是排除空
    db-config:
      select-strategy: not_empty
    #sql-injector: com.baomidou.mybatisplus.core.injector.ISqlInjector
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  configuration-properties:
    isLogicDel: 'true'
#日志
logging:
      level:
        org.dev.framework.modules.**.mapper: DEBUG
        org.dev.framework.modules: INFO
# 自定义配置
springboot_vue:
  upload:
    local-upload-path: E:\Temp\upload
    suffix: .jpg,.bmp,.jpeg,.png,.zip,.rar,.xls,.xlsx,.doc,.docx,.pdf,.txt,.ci,.vi,bpmn,xml
